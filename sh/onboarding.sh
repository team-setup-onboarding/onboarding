#!/usr/bin/env zsh

set -eo pipefail

DIR="$( cd "$( dirname "$0" )" && pwd )"
TEAM_HOME=$(cd $DIR && cd ../.. && pwd) 
REPO_ROOT=$(cd $DIR && cd .. && pwd)

source $DIR/formatting.sh

echo ""
echo "${FMT_BLUE}$(heading "Setting up your team environment")${FMT_RESET}"
echo ""

check_prerequisites() {
  echo -n "Checking pre-requisites... "

  if [[ -z "${ZSH-}" ]]; then
      echo "${FMT_RED}Please install https://github.com/robbyrussell/oh-my-zsh${FMT_RESET}"
      exit 1
  fi
  if [[ $(hash brew 2>/dev/null) -gt 0 ]]; then
      echo "${FMT_RED}Please install homebrew and then re-run this script${FMT_RESET}"
      exit 1
  fi
  echo "${FMT_GREEN}${CHECKMARK}${FMT_RESET}"
  echo ""
}

install_dependencies() {
  echo "Installing dependencies using brew..."

  brew tap -q matthewwoodruff/sdoc https://github.com/matthewwoodruff/sdoc
  packages=( \
    "sdoc" \
    "gh" \
    "jq" \
    "terraform" \
    "--cask google-cloud-sdk" \
    "kubectx" \
    "pyenv" \
    "tree" \
    "coreutils" \
    "direnv" \
    "node" \
    "fzf" \
    )

  for i in "${packages[@]}"
  do
    eval "brew list --versions $i" || eval "brew install $i"
  done
  if [[ $OSTYPE = linux ]]; then brew list --versions net-tools || brew install net-tools; fi

  # Install terraform-visual using npm
  echo ""
  echo 'Install terraform-visual using npm...'
  npm install -g @terraform-visual/cli
  npm list -g | grep "@terraform-visual"

  echo ""
}

alias gpair="${DIR}/git-pair"

add_gitpair_members() {
  echo -n "Adding team members to git-pair... "

  git config --global init.templatedir "${REPO_ROOT}/git-templates"
  cp $REPO_ROOT/git-templates/hooks/prepare-commit-msg $REPO_ROOT/.git/hooks
  gpair add vj "Victoria Jones <vicky.jones@example.com>"
  gpair add nb "Sam Smith <sam.smith@example.com>"
  echo "${FMT_GREEN}${CHECKMARK}${FMT_RESET}"
  echo ""
}

init_zsh_config() {
  echo -n "Creating a custom zsh init script... "

  zshPath=$ZSH/custom/team.zsh

  cat <<EOT > $zshPath
# Generated by the onboarding script, any changes may be overwritten
# ------------------------------------------------------------------
export TEAM_HOME=$TEAM_HOME
export PATH=\$PATH:${REPO_ROOT}/bin
alias teamh="cd $TEAM_HOME"
alias gpair="${DIR}/git-pair"


# We need to check for M1 and Intel homebrew variations below as they are installed in different locations on M1.
if [ -d "$(brew --prefix)/share/google-cloud-sdk" ]
then
    source "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc"
    source "$(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc"
elif [ -d "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk" ]
then
    source "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
    source "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"
else
    echo "Neither the $(brew --prefix)/share/google-cloud-sdk/path.zsh.inc or $(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk directory can be found..."
    echo "Skipping install of completion scripts!"
fi

eval "\$(direnv hook zsh)"

terraform () {
   if [[ -z "\${CLOUDSDK_ACTIVE_CONFIG_NAME}" ]]; then
       $(which terraform) \$@
   else
       >&2 echo "using gcloud profile: \${CLOUDSDK_ACTIVE_CONFIG_NAME}"
       >&2 echo "if it asks you for a password, run 'gcloud auth login' instead"
       GOOGLE_OAUTH_ACCESS_TOKEN="\$(gcloud auth print-access-token)" $(which terraform) \$@
   fi
}

export BASH_ENV=$HOME/.bash_team

EOT

  echo "${FMT_GREEN}${CHECKMARK}${FMT_RESET}"
  echo ""
}

init_bash_config() {
  echo -n "Creating a custom bash init script... "

  cat <<EOT > $HOME/.bash_team
# Generated by the onboarding script, any changes may be overwritten
# ------------------------------------------------------------------

eval "\$(direnv hook bash)"

terraform () {
   if [[ -z "\${CLOUDSDK_ACTIVE_CONFIG_NAME}" ]]; then
       $(which terraform) \$@
   else
       >&2 echo "using gcloud profile: \${CLOUDSDK_ACTIVE_CONFIG_NAME}"
       >&2 echo "if it asks you for a password, run 'gcloud auth login' instead"
       GOOGLE_OAUTH_ACCESS_TOKEN="\$(gcloud auth print-access-token)" $(which terraform) \$@
   fi
}

EOT

  echo "${FMT_GREEN}${CHECKMARK}${FMT_RESET}"
  echo ""
}

setup_global_gitignore() {
  echo -n "Setting up global gitignore... "
  gitignore_file="$(git config --global core.excludesfile || true)"
  # Handle git ignore not configured
  if [[ -z "${gitignore_file}" ]]; then
    DEFAULT_GITIGNORE_GLOBAL_FILE=~/.gitignore_global
    gitignore_file="$DEFAULT_GITIGNORE_GLOBAL_FILE"
    touch $gitignore_file
    git config --global core.excludesfile "$gitignore_file"
  fi

  gitignore_file=${gitignore_file/#\~/$HOME}

  # Handle git ignore configured but file doesn't exist edge case that Chris had
  if [[ ! -f ${gitignore_file} ]]; then
    # echo "# Created by onboarding/sh/onboarding.sh" >  ${gitignore_file/#\~/$HOME}
    touch ${gitignore_file}
  fi

  to_be_ignored=( \
    ".envrc" \
    "terraform-visual-report/" \
    "plan.json" \
    "plan.out" \
  )

  for i in "${to_be_ignored[@]}"
  do
    already_ignored=$(cat $gitignore_file | grep -F "$i" | wc -l || true)
      # Only add the line once - so we can rerun onboarding.sh multiple times
      if [[ "$already_ignored" -lt 1 ]]; then
        echo "adding $i to global gitignore file"
        echo "$i" >> $gitignore_file
      fi
  done
}

check_prerequisites
install_dependencies
add_gitpair_members
init_zsh_config
init_bash_config
setup_global_gitignore

fmt_underline "${FMT_GREEN}You are onboarded.${FMT_RESET}"

cat <<EOT

Try the team onboarding API 
$(fmt_code "team")
to see what you can now do.

If you haven't already created a git API token with read access to APIs and repos, please do so now at:
$(fmt_link "gitlab pat" "https://gitlab.com/-/profile/personal_access_tokens") then try
$(fmt_code "team gitlab login")

If you've logged in successfully using the team cli, you can clone all the team repos using
$(fmt_code "team repos clone-all")

EOT

exec zsh --login
